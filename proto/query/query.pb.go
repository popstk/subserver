// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/query/query.proto

package Server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Decode               bool     `protobuf:"varint,2,opt,name=decode,proto3" json:"decode,omitempty"`
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a04aea6d788fe62, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Request) GetDecode() bool {
	if m != nil {
		return m.Decode
	}
	return false
}

func (m *Request) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a04aea6d788fe62, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "Server.Request")
	proto.RegisterType((*Reply)(nil), "Server.Reply")
}

func init() { proto.RegisterFile("proto/query/query.proto", fileDescriptor_1a04aea6d788fe62) }

var fileDescriptor_1a04aea6d788fe62 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x4f, 0x4a, 0xc3, 0x40,
	0x18, 0xc5, 0x49, 0x35, 0xa9, 0xfd, 0xa0, 0x28, 0x1f, 0x62, 0x43, 0x71, 0x11, 0xb3, 0xca, 0x2a,
	0x41, 0x3d, 0x81, 0xdd, 0x0a, 0x52, 0xa7, 0x27, 0xc8, 0x9f, 0x8f, 0x30, 0x90, 0x66, 0xa6, 0xf3,
	0x27, 0x10, 0xc4, 0x8d, 0x57, 0xf0, 0x68, 0x5e, 0xc1, 0x83, 0x48, 0x66, 0x22, 0xdd, 0x0c, 0xf3,
	0x1e, 0x6f, 0xe6, 0xfd, 0x1e, 0x6c, 0xa4, 0x12, 0x46, 0x14, 0x27, 0x4b, 0x6a, 0xf4, 0x67, 0xee,
	0x1c, 0x8c, 0x0e, 0xa4, 0x06, 0x52, 0xdb, 0xfb, 0x56, 0x88, 0xb6, 0xa3, 0xa2, 0x94, 0xbc, 0x28,
	0xfb, 0x5e, 0x98, 0xd2, 0x70, 0xd1, 0x6b, 0x9f, 0x4a, 0x5f, 0x61, 0xc9, 0xe8, 0x64, 0x49, 0x1b,
	0x44, 0xb8, 0xb4, 0x96, 0x37, 0x71, 0x90, 0x04, 0xd9, 0x8a, 0xb9, 0x3b, 0xde, 0x41, 0xd4, 0x50,
	0x2d, 0x1a, 0x8a, 0x17, 0x49, 0x90, 0x5d, 0xb1, 0x59, 0xe1, 0x2d, 0x84, 0x1d, 0x3f, 0x72, 0x13,
	0x5f, 0x24, 0x41, 0xb6, 0x66, 0x5e, 0xa4, 0x0f, 0x10, 0x32, 0x92, 0xdd, 0x88, 0x31, 0x2c, 0x8f,
	0xa4, 0x75, 0xd9, 0xd2, 0xfc, 0xdb, 0xbf, 0x7c, 0x7a, 0x83, 0xd5, 0xc1, 0x56, 0xba, 0x56, 0xbc,
	0x22, 0x7c, 0x81, 0xf0, 0x7d, 0x22, 0xc6, 0xeb, 0xdc, 0xc3, 0xe6, 0x33, 0xcb, 0x76, 0x7d, 0x36,
	0x64, 0x37, 0xa6, 0xf1, 0xd7, 0xcf, 0xef, 0xf7, 0x02, 0xf1, 0xa6, 0x18, 0x1e, 0xe7, 0xa9, 0x1f,
	0x13, 0xdf, 0xe7, 0xae, 0x80, 0x0d, 0x17, 0x79, 0xab, 0x64, 0x9d, 0x6b, 0x5b, 0x69, 0xff, 0xc8,
	0x25, 0x76, 0x38, 0x15, 0xd1, 0x40, 0xca, 0x75, 0xec, 0xa7, 0xb9, 0xfb, 0xa0, 0x8a, 0xdc, 0xee,
	0xe7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0xcd, 0x6d, 0xf2, 0x38, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscribeClient is the client API for Subscribe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeClient interface {
	// Sends a greeting
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type subscribeClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeClient(cc *grpc.ClientConn) SubscribeClient {
	return &subscribeClient{cc}
}

func (c *subscribeClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/Server.Subscribe/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeServer is the server API for Subscribe service.
type SubscribeServer interface {
	// Sends a greeting
	Query(context.Context, *Request) (*Reply, error)
}

// UnimplementedSubscribeServer can be embedded to have forward compatible implementations.
type UnimplementedSubscribeServer struct {
}

func (*UnimplementedSubscribeServer) Query(ctx context.Context, req *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterSubscribeServer(s *grpc.Server, srv SubscribeServer) {
	s.RegisterService(&_Subscribe_serviceDesc, srv)
}

func _Subscribe_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server.Subscribe/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subscribe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Server.Subscribe",
	HandlerType: (*SubscribeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Subscribe_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/query/query.proto",
}
